
#==============================================================================
# Sprites
#==============================================================================

LOAD SPRITES;
	
SPRITESHEET "tileset_objects",					(16, 16), (1, 1), (18, 18); END;
SPRITESHEET "tileset_objects_extras_16x16",		(16, 16), (1, 1), (18, 18); END;

#==============================================================================
# Animations
#==============================================================================

LOAD ANIMATIONS;

SPRITESHEET "tileset_objects_extras_16x16";

TEMPANIM lantern_lit; SUBSTRIP repeat;
	ADD strip, 16, 4, (0, 3); END;


#==============================================================================
# Tiles
#==============================================================================

LOAD TILESETS;


# ---- Lantern ----------------------------------------------------------------

TILE lantern;
	TYPE		TileLantern;
	SOLID		block;
	SPRITEINDEX	0, lantern_lit;
	SPRITEINDEX 1, tile_lantern_unlit;
	PROPERTIES	(boolean, lit,				true, "Lit", "", "", "Whether the lantern starts lit or not.", false),
				(boolean, remember_state,	false, "Remember State", "", "", "Will the lantern's lit state be remembered after leaving the room?");
	EVENT event_light, "Light", "Occurs when the lantern is lighted.", (Lantern, lantern);
	EVENT event_put_out, "Put Out", "Occurs when the lantern is put out.", (Lantern, lantern);
END;

# ---- Signs ------------------------------------------------------------------

TILE sign;
	TYPE		TileSign;
	SOLID		block;
	FLAGS		Pickupable, Burnable, Cuttable, Switchable, Boomerangable;
	BREAKANIM	effect_sign_break;
	BREAKSOUND	rock_shatter;
	PROPERTIES
		(integer, cuttable_sword_level, 1),
		(string, text, "Hello World!",
			"Text", "text_message", "Sign",
			"The text to display when the sign is read from the front.", false);
END;

TILE sign_alt;
	CLONE		sign;
	SPRITE		tile_sign_alt;
	SPRITEOBJ	tile_sign_alt_asobject;
END;

# ---- Movable Blocks ---------------------------------------------------------

TILE pushable_block;
	SOLID		block;
	FLAGS		Movable;
	SPRITE		tile_movable_block;
	SPRITEOBJ	tile_movable_block_asobject;
	PROPERTIES	(boolean, move_once, true);
END;


# ---- Color Jump Pad ---------------------------------------------------------

TILE color_jump_pad;
	TYPE		TileColorJumpPad;
	PROPERTIES	(integer, color,			0,		"Color",			"", "Color", "The color of the jump pad."),
				(boolean, remember_state,	false,	"Remember State",	"", "Color", "Will the jump pad's color be remembered after leaving the room?");
	EVENT		event_color_change, "Color Change", "Occurs when the pad's color changes.", (ColorJumpPad, tile, Color, color);
END;

TILE color_jump_pad_red;
	CLONE		color_jump_pad;
	SPRITE		tile_color_jump_pad_red;
	PROPERTIES	(integer, color, 0);
END;

TILE color_jump_pad_yellow;
	CLONE		color_jump_pad;
	SPRITE		tile_color_jump_pad_yellow;
	PROPERTIES	(integer, color, 1);
END;

TILE color_jump_pad_blue;
	CLONE		color_jump_pad;
	SPRITE		tile_color_jump_pad_blue;
	PROPERTIES	(integer, color, 2);
END;

# ---- Color Tile -------------------------------------------------------------

TILE color_tile;
	TYPE		TileColorTile;
	PROPERTIES	(integer, color,			0,		"Color",			"", "Color", "The color of the tile."),
				(boolean, remember_state,	false,	"Remember State",	"", "Color", "Will the tile's color be remembered after leaving the room?");
END;

# ---- Color Barrier ----------------------------------------------------------

TILE color_barrier;
	TYPE		TileColorBarrier;
	HALFSOLID	block;
	SPRITE		tile_color_barrier_red_raised;
	PROPERTIES	(integer, color, 0, "Color", "", "Color", "The color of the barrier (red or blue).");
END;

# ---- Color Statue -----------------------------------------------------------

TILE color_statue;
	SOLID		block;
	FLAGS		Movable;
	PROPERTIES	(integer, color, 0, "Color", "", "", "The color of the statue.");
END;

TILE color_statue_red;
	CLONE		color_statue;
	SPRITE		tile_color_statue_red;
	PROPERTIES	(integer, color, 0);
END;

TILE color_statue_yellow;
	CLONE		color_statue;
	SPRITE		tile_color_statue_yellow;
	PROPERTIES	(integer, color, 1);
END;

TILE color_statue_blue;
	CLONE		color_statue;
	SPRITE		tile_color_statue_blue;
	PROPERTIES	(integer, color, 2);
END;

# ---- Color Cube Slot --------------------------------------------------------

TILE color_cube_slot;
	TYPE		TileColorCubeSlot;
	EVENT		on_color_change, "Color Change", "Occurs when the slot's color changes.", (ColorCubeSlot, tile, Color, color);
END;

# ---- Color Lantern ----------------------------------------------------------

TILE color_lantern;
	TYPE		TileColorLantern;
	SOLID		block;
	EVENT		on_color_change, "Color Change", "Occurs when the lantern's flame color changes.", (ColorLantern, tile, Color, color);
END;

# ---- Button -----------------------------------------------------------------

TILE button;
	TYPE		TileButton;
	PROPERTIES	(boolean, releasable,		true, "Releasable",			"", "Button", "Can the button only be pressed, and not released?"),
				(boolean, pressed,			false, "Pressed",			"", "Button", "Is the button pressed"),
				(boolean, remember_state,	false, "Remember State",	"", "Button", "Will the button's state be remembered after leaving the room?");
	EVENT on_press, "On Press", "Occurs when the button is pressed.", (Button button);
	EVENT on_release, "On Release", "Occurs when the button is released.", (Button button);
END;

# ---- Lever ------------------------------------------------------------------

TILE lever;
	TYPE TileLever;
	SOLID block;
	FLAGS AbsorbSeeds;
	PROPERTIES	(boolean, switch_once,		false,	"Switch Once",		"", "Lever", "Can the lever only be switched once?"),
				(boolean, switch_state,		false,	"Switch State",		"", "Lever", "True if the lever is facing left."),
				(boolean, remember_state,	false,	"Remember State",	"", "Lever", "Will the lever's state be remembered after leaving the room?");
	EVENT event_toggle, "Toggle", "Occurs when the lever is toggled.", (Lever, lever);
END;

# ---- Door -------------------------------------------------------------------

TILE door;
	TYPE		TileDoor;
	SOLID		block;
	PROPERTIES	(boolean, open, false, "Open", "", "Door", "True if the door open."),
				(integer, direction, 0, "Direction", "direction", "Door", "The direction the door is facing.", false),
				(boolean, remember_state, false, "Remember State", "", "Door", "Will the door's opened state be remembered after leaving the room?");
END;

TILE small_key_door;
	CLONE		door;
	TYPE		TileSmallKeyDoor;
	PROPERTIES	(boolean, remember_state, true);
END;

TILE boss_key_door;
	CLONE		door;
	TYPE		TileBossKeyDoor;
	PROPERTIES	(boolean, remember_state, true);
END;

TILE minecart_door;
	CLONE		door;
	TYPE		TileMinecartDoor;
END;

TILE eye_statue;
	TYPE		TileEyeStatue;
	SOLID		block;
END;

TILE locked_block;
	TYPE		TileLockedBlock;
	SOLID		block;
END;

TILE web_wall;
	SOLID		block;
	FLAGS		Burnable;
	PROPERTIES	(boolean, disable_on_destroy, true);
END;

TILE bombable_wall;
	SOLID		block;
	FLAGS		Burnable;
	PROPERTIES	(boolean, disable_on_destroy, true);
END;

TILE minecart_track;
	TYPE		TileMinecartTrack;
	FLAGS		NotCoverable;
	SPRITEINDEX	0, "tileset_objects", (10, 11);	# Horizontal
	SPRITEINDEX	1, "tileset_objects", (11, 11);	# Vertical
	SPRITEINDEX	2, "tileset_objects", (10, 10);	# Right/Up
	SPRITEINDEX	3, "tileset_objects", (11, 10);	# Up/Left
	SPRITEINDEX	4, "tileset_objects", (11, 9);	# Left/Down
	SPRITEINDEX	5, "tileset_objects", (10, 9);	# Down/Right
	PROPERTIES	(boolean, minecart, false, "Has Minecart", "", "Minecart", "Does this track currently have a minecart on it?"),
				(integer, switched_track_index, 0, "Switched Track Index", "", "Minecart", "");
END;

# This tile is used by the Shovel.
TILE dug;
	SPRITE		"tileset_objects", (1, 2);
END;

# This tile is used by Cracked floors
TILE pit;
	ENVTYPE		Hole;
	SPRITE		tile_pit;
END;



#==============================================================
# Tilesets
#==============================================================

TILESET objects, tileset_objects, (12, 13);
DEFAULT (0, 3);

# ??
TILE (0, 3);
	FLAGS		Digable;
END;

# Bush
TILE (0, 0);
	SOLID		block;
	FLAGS		Pickupable, Bombable, Burnable, Switchable, Cuttable, AbsorbSeeds, Boomerangable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (0, 0);
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Plant
TILE (1, 0);
	TYPE		TileRegrowingPlant;
	MODEL		block;
	FLAGS		Cuttable, Bombable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Flowers Red
TILE (2, 0);
	SOLID		block;
	FLAGS		Cuttable, Boomerangable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Flowers Blue
TILE (3, 0);
	SOLID		block;
	FLAGS		Cuttable, Boomerangable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Flowers Pink
TILE (4, 0);
	SOLID		block;
	FLAGS		Cuttable, Boomerangable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Flower
TILE (5, 0);
	SOLID		block;
	FLAGS		Cuttable, Boomerangable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Water Flower
TILE (6, 0);
	SOLID		block;
	FLAGS		Cuttable, Boomerangable;
	BREAKANIM	effect_leaves;
	BREAKSOUND	leaves;
END;

# Mushroom
TILE (7, 0);
	SOLID		block;
	FLAGS		Pickupable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (1, 0);
END;

# Seed
TILE (8, 0);
	SOLID		block;
	FLAGS		Pickupable, Cuttable, Switchable, Movable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (2, 0);
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
END;

# Burnable Tree
TILE (9, 0);
	SOLID		block;
	FLAGS		Burnable, AbsorbSeeds;
END;

# Grass
TILE (10, 0);
	FLAGS		Cuttable, Burnable, Bombable, Boomerangable;
	ENVTYPE		Grass;
	BREAKANIM	effect_grass_leaves;
	BREAKSOUND	leaves;
END;

# Grass 2
TILE (11, 0);
	FLAGS		Cuttable, Burnable, Bombable, Boomerangable;
	BREAKANIM	effect_grass_leaves;
	BREAKSOUND	leaves;
END;

# Rock
TILE (0, 1);
	SOLID		block;
	FLAGS		Pickupable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (3, 0);
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
END;

# Diamond Rock
TILE (1, 1);
	SOLID		block;
	FLAGS		Switchable, SwitchStays;
	SPRITEOBJ	"tileset_objects_extras_16x16", (4, 0);
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
END;

# Crystal
TILE (2, 1);
	SOLID		block;
	FLAGS		Cuttable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (5, 0);
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
END;

# Pot
TILE (3, 1);
	SOLID		block;
	FLAGS		Cuttable, Movable, Pickupable, Switchable;
	SPRITEOBJ	"tileset_objects_extras_16x16", (6, 0);
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
	PROPERTIES	(integer, cuttable_sword_level, 1);
END;

# Sign 
TILE (4, 1);
	CLONE		sign;
	SPRITEOBJ	"tileset_objects_extras_16x16", (7, 0);
END;

# Sign Old
TILE (5, 1);
	CLONE		sign;
	SPRITEOBJ	"tileset_objects_extras_16x16", (8, 0);
END;

# Movable Block
TILE (6, 1);
	CLONE		pushable_block;
	SPRITEOBJ	"tileset_objects_extras_16x16", (3, 1);
END;

# Bombable Block
TILE (7, 1);
	SOLID		block;
	FLAGS		Bombable;
	BREAKANIM	effect_rock_break;
	BREAKSOUND	rock_shatter;
END;

# Armos Statue
TILE (8, 1);
	CLONE		pushable_block;
	SPRITEOBJ	"tileset_objects_extras_16x16", (9, 0);
END;

# Gravestone
TILE (9, 1);
	CLONE		pushable_block;
	SPRITEOBJ	"tileset_objects_extras_16x16", (10, 0);
END;

# Fairy Satue
TILE (10, 1);
	CLONE		pushable_block;
	SPRITEOBJ	"tileset_objects_extras_16x16", (11, 0);
END;

# Ice Block
TILE (11, 1);
	CLONE		pushable_block;
END;

# Dirt pile
TILE (0, 2);
	SOLID		block;
	FLAGS		Digable;
END;

# Hole
TILE (2, 2);
	ENVTYPE		Hole;
END;

# Cracked Floor
TILE (3, 2);
	TYPE		TileCrackedFloor
END;

# Color statue (Red)
TILE (8, 3);
	CLONE color_statue;
	PROPERTIES	(integer, color, 0);
END;

# Color statue (Blue)
TILE (9, 3);
	CLONE color_statue;
	PROPERTIES	(integer, color, 2);
END;

# Color statue (Yellow)
TILE (10, 3);
	CLONE color_statue;
	PROPERTIES	(integer, color, 1);
END;

# Lantern
TILE (0, 5);
	CLONE		lantern;
	SPRITEINDEX	0, "lantern_lit";
	SPRITEINDEX 1, "tileset_objects_extras_16x16", (4, 3);
END;

# Lever
TILE (1, 5);
	CLONE lever;
	SPRITEINDEX	0, "tileset_objects", (1, 5);
	SPRITEINDEX	1, "tileset_objects_extras_16x16", (5, 3);
END;

# Button
TILE (2, 5);
	CLONE		button;
	SPRITEINDEX	0, "tileset_objects", (2, 5);
	SPRITEINDEX	1, "tileset_objects_extras_16x16", (6, 3);
END;

# Color Cube Slot
TILE (3, 5);
	CLONE color_cube_slot;
END;

# Color lantern
TILE (4, 5);
	CLONE color_lantern;
END;

# Color Jump Pad (Red)
TILE (5, 5);
	CLONE		color_jump_pad;
	PROPERTIES	(integer, color, 0);
END;

# Color Tile (Blue)
TILE (6, 5);
	CLONE		color_tile;
	PROPERTIES	(integer, color, 2);
END;

# Color Tile (Red)
TILE (7, 5);
	CLONE		color_tile;
	PROPERTIES (integer, color, 0);
END;

# Color Barrier (Blue)
TILE (8, 5);
	CLONE		color_barrier;
	PROPERTIES	(integer, color, 2);
END;

# Color Barrier (Red)
TILE (9, 5);
	CLONE		color_barrier;
	PROPERTIES	(integer, color, 0);
END;

# Moving Platform
TILE (10, 5);
	TYPE TilePlatform;
END;

# Basic doors
TILE (0, 7);
	CLONE door;
	PROPERTIES (integer, direction, 1);
END;
TILE (1, 7);
	CLONE door;
	PROPERTIES (integer, direction, 2);
END;
TILE (0, 8);
	CLONE door;
	PROPERTIES (integer, direction, 3);
END;
TILE (1, 8);
	CLONE door;
	PROPERTIES (integer, direction, 0);
END;

# Small key doors
TILE (4, 7);
	CLONE small_key_door;
	PROPERTIES (integer, direction, 1);
END;
TILE (5, 7);
	CLONE small_key_door;
	PROPERTIES (integer, direction, 2);
END;
TILE (4, 8);
	CLONE small_key_door;
	PROPERTIES (integer, direction, 3);
END;
TILE (5, 8);
	CLONE small_key_door;
	PROPERTIES (integer, direction, 0);
END;

# Boss key doors
TILE (6, 7);
	CLONE boss_key_door;
	PROPERTIES (integer, direction, 1);
END;
TILE (7, 7);
	CLONE boss_key_door;
	PROPERTIES (integer, direction, 2);
END;
TILE (6, 8);
	CLONE boss_key_door;
	PROPERTIES (integer, direction, 3);
END;
TILE (7, 8);
	CLONE boss_key_door;
	PROPERTIES (integer, direction, 0);
END;

# Minecart doors
TILE (2, 7);
	CLONE minecart_door;
	PROPERTIES (integer, direction, 1);
END;
TILE (3, 7);
	CLONE minecart_door;
	PROPERTIES (integer, direction, 2);
END;
TILE (2, 8);
	CLONE minecart_door;
	PROPERTIES (integer, direction, 3);
END;
TILE (3, 8);
	CLONE minecart_door;
	PROPERTIES (integer, direction, 0);
END;

# Burnable Web Walls
TILE (0, 9);	CLONE web_wall; END;
TILE (1, 9);	CLONE web_wall; END;
TILE (0, 10);	CLONE web_wall; END;
TILE (1, 10);	CLONE web_wall; END;

# Bombable Walls
TILE (2, 9);	CLONE bombable_wall; END;
TILE (3, 9);	CLONE bombable_wall; END;
TILE (2, 10);	CLONE bombable_wall; END;
TILE (3, 10);	CLONE bombable_wall; END;

# Minecart Tracks
TILE (10, 9);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 5);
END;
TILE (11, 9);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 4);
END;
TILE (10, 10);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 2);
END;
TILE (11, 10);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 3);
END;
TILE (10, 11);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 0);
END;
TILE (11, 11);
	CLONE minecart_track;
	PROPERTIES (integer, sprite_index, 1);
END;

# Minecart End Track
TILE (11, 12);
	TYPE	TileMinecartStop;
	FLAGS	NotCoverable;
END;

# Eye Statue
TILE (0, 11);
	CLONE eye_statue;
END;

# Locked block
TILE (2, 11);
	CLONE locked_block;
END;

END;